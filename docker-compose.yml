# docker compose configuration for:
# - local development
#   intended use is to start external services like databases. they are exposed to the
#   host, so the development could be done without docker build overhead.
# - CI jobs
#   the application container contains all necessary dependencies to run CI checks.
#   running docker compose run app <command> should be enough.

services:
  app:
    image: "tinyurl2"
    build:
      dockerfile: "docker/app/Dockerfile"
    entrypoint: "docker/app/entrypoint.sh"
    environment:
      TINYURL2_DATABASE_HOST: db
      # compose cannot interpolate variables from this environment section,
      # so set db host explicitly in database URL
      TINYURL2_DATABASE_URL: "postgresql+psycopg://${TINYURL2_DATABASE_USER}:${TINYURL2_DATABASE_PASSWORD}@db:${TINYURL2_DATABASE_PORT:-5432}/${TINYURL2_DATABASE_NAME}"
    env_file:
      - ".env"
    depends_on:
      # use default condition, because "docker compose run" fails with service_healthy
      # condition. error is "dependency failed to start"
      - db

  db:
    image: "postgres:15.2"
    environment:
      POSTGRES_USER: ${TINYURL2_DATABASE_USER}
      POSTGRES_PASSWORD: ${TINYURL2_DATABASE_PASSWORD}
      POSTGRES_DB: ${TINYURL2_DATABASE_NAME}
      POSTGRES_PORT: ${TINYURL2_DATABASE_PORT:-5432}
    ports:
      - "${TINYURL2_DATABASE_PORT:-5432}:${TINYURL2_DATABASE_PORT:-5432}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      start_period: 5s
      retries: 3
